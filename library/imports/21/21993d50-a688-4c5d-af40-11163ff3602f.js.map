{"version":3,"sources":["assets\\scripts\\game\\discard-GameLevel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// bug 已废弃 \r\nimport { DevelopersToolGlobal as ccvv, mathMacro as mm } from '../base/class/DevelopersToolGlobal';\r\nimport PawnMovement from '../base/tool/PawnMovement';\r\nimport GridAbsorb from '../base/tool/GridAdsorb';\r\nimport NTR from \"../base/tool/NoRootTree\";\r\n\r\n/**\r\n * 牛头人 NTR 继承自ringbuffer继承自RigorousArray\r\n * 驱动网格 GridAbsorb 用来驱动其他方块的对齐与运动\r\n * 移动组件 PawnMovement 简单的运动解算器，仅保留了速度解算和抵达解算，没事可以换着玩\r\n * 数学宏库 mm 效率低，没事别用\r\n * 全局仓库 ccvv.warehouse 用来保存动态加载内容\r\n * 全局工具 ccvv.tool 暂无\r\n * 全局其他 ccvv.other 暂无\r\n * 全局界面 ccvv.layer 保存当前世界中的所有已定义层\r\n * 全局脚本 ccvv.script 保存这个关卡脚本\r\n * 全局实例 ccvv.instance 作为全局冲突池\r\n */\r\n// (〃´-ω･) 诶嘿~ \r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class Game extends cc.Component {\r\n\r\n    @property(cc.Label)\r\n    label: cc.Label = null;\r\n\r\n    @property\r\n    text: string = 'hello';\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        // 提升为关卡脚本\r\n        ccvv.script = this;\r\n\r\n        // 开启碰撞\r\n        var manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n        manager.enabledDebugDraw = true;\r\n        manager.enabledDrawBoundingBox = true;\r\n\r\n        // 创建无根树\r\n        NTR.tree = new NTR(this.treeSize);\r\n        // 创建网格驱动\r\n        this.creatGrid();\r\n\r\n        // cc.log(ccvv.fristScript)\r\n        // cc.log(ccvv.warehouse);\r\n        // ccvv.layers[0].addChild(new ccvv.warehouse['frames']['bg'])\r\n    }\r\n\r\n    start() {\r\n        this.touchRegister();\r\n        // this.creat_lineCube();\r\n\r\n    }\r\n\r\n    update(dt) {\r\n        this.gameProcess_SpawnCube();\r\n        // 更新所有方块的位置\r\n        GridAbsorb.grid.offset = new cc.Vec3(0, -dt * this.globalSpeed, 0);\r\n    }\r\n\r\n    // TAG USER FUNCTION:                                                                                    \r\n\r\n    // SIGNPOST 网格生成                                                                                     \r\n\r\n    protected creatGrid() {\r\n        new GridAbsorb(\r\n            new cc.Vec3(this.column, this.treeSize, 0),\r\n            new cc.Vec3(this.cubeWidget, this.cubeHeight, 0)\r\n        );\r\n        GridAbsorb.grid.offset = new cc.Vec3(0, cc.winSize.height / 2 + this.cubeHeight, 0);\r\n    }\r\n\r\n    // SIGNPOST 诞生方式                                                                                     \r\n\r\n    /**\r\n     * 游戏流程-诞生方块\r\n     */\r\n    protected gameProcess_SpawnCube() {\r\n        if (this.cheackRoot()) {\r\n            this.creat_lineCube();\r\n            // cc.log(NTR.tree.buffer);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 检查目标叶节点是否已为过去式\r\n     */\r\n    protected cheackLose() {\r\n        let leaf = this.curTreeNode('leaf');\r\n        if (!leaf) return false;\r\n        let leafPos = leaf.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n        let isoutbox = leafPos.y <= (cc.winSize.height * this.separatorPercent);\r\n        return isoutbox;\r\n    }\r\n\r\n    /**\r\n     * 检查目标根节点是否已为过去式\r\n     */\r\n    protected cheackRoot() {\r\n        let root = this.curTreeNode();\r\n        if (!root) return true;\r\n        let size = cc.v2(cc.winSize.width, cc.winSize.height);\r\n        let size2 = size.div(2);\r\n        let rootPos = root.convertToWorldSpaceAR(cc.Vec2.ZERO);\r\n        let isinbox = new mm(rootPos).isInBox2(size2, size2.add(cc.v2(0, this.cubeHeight / 2)));\r\n        return isinbox;\r\n    }\r\n\r\n    /**\r\n     * 返回任意目标节点\r\n     */\r\n    public curTreeNode(node: string = 'root'): cc.Node {\r\n        if (NTR.tree[node]) {\r\n            let treeIndex = 0;\r\n            for (let index = 0; !NTR.tree[node][index]; treeIndex = ++index);\r\n            return NTR.tree[node][treeIndex];\r\n        }\r\n        else\r\n            return undefined;\r\n    }\r\n\r\n    // TAG NATIVE FUNCTION                                                                                   \r\n\r\n    // SIGNPOST touchevent                                                                                   \r\n\r\n    /**\r\n     * 注册触摸事件\r\n     */\r\n    protected touchRegister() {\r\n        if (!this.readyTouch) {\r\n            this.readyTouch = true;\r\n            ccvv.layers[0].on(\"touchstart\", this.onTouchStart, this);\r\n        }\r\n    }\r\n    /**\r\n     * 注销触摸事件\r\n     */\r\n    protected touchCancel() {\r\n        if (this.readyTouch) {\r\n            this.readyTouch = false;\r\n            ccvv.layers[0].off(\"touchstart\", this.onTouchStart, this);\r\n        }\r\n    }\r\n    /**\r\n     * 已经注册触摸\r\n     */\r\n    protected readyTouch: boolean = false;\r\n\r\n    /**\r\n     * 当触摸发生时\r\n     * @param event \r\n     */\r\n    protected onTouchStart(event) {\r\n        let touchArea = event.getLocation().x / this.cubeWidget;\r\n        let inst = this.creat_PlayerCube();\r\n        let inx = Math.ceil(touchArea) * (this.cubeWidget + this.cubeInteraval) - ((cc.winSize.width + this.cubeWidget) / 2);\r\n        inst.setPosition(inx, cc.winSize.width * this.separatorPercent - cc.winSize.width);\r\n    }\r\n\r\n    /**\r\n     * 诞生玩家方块\r\n     * 玩家方块不受全局速度影响，不放在树中\r\n     */\r\n    protected creat_PlayerCube(): cc.Node {\r\n        let inst = this.creatActor(this.cube, ccvv.layers[1]);\r\n        try { inst.getComponent('Block').init(null, true); }\r\n        catch { cc.log(\"找不到组件: Block\"); }\r\n        this.bindMovement_retrograde(inst);\r\n        return inst;\r\n    }\r\n    /**\r\n     * 绑定逆向移动控制组件\r\n     * @param inst \r\n     */\r\n    protected bindMovement_retrograde(inst): void {\r\n        let movement = new PawnMovement(inst);\r\n        movement.maxSpeed = this.playerSpeed;\r\n        movement.permDrag = 0;\r\n        movement.permForce = new cc.Vec2(0, 1200);\r\n        movement.velocity = new cc.Vec2(0, this.playerSpeed);\r\n        inst['playerMovement'] = movement;\r\n    }\r\n\r\n    // TAG Prefabricated function                                                                            \r\n\r\n    // SIGNPOST instantiation and destory Actor                                                              \r\n\r\n    /**\r\n     * 创建一行方块\r\n     * 随机方式我想应该大概也许是独立随机事件\r\n     * 每行绝对会留一个空\r\n     * @param chance 生成机会，机会越大越容易成功，但肯定会留给玩家一个空，推荐在 3 ~ 5\r\n     */\r\n    public creat_lineCube(chance = 4) {\r\n        let perch = [];\r\n        let child = {};\r\n        let childIndex = NTR.tree.add(child);\r\n        let loop = chance;\r\n        while (loop--) {\r\n            let curcol = this.randomInColumn;\r\n            if (perch.indexOf(curcol) < 0) {\r\n                perch.push(curcol)\r\n                let inst = this.creat_ProductionCube(childIndex, curcol);\r\n                inst.setPosition(this.spawnOrigin.add(cc.v2(curcol * (this.cubeWidget + this.cubeInteraval), 0)))\r\n                child[curcol] = inst;\r\n            }\r\n            if (perch.length >= (this.column - 1)) break;\r\n        }\r\n    }\r\n    /**\r\n     * 创建一个方块在堆叠层\r\n     * 并完成基本构造行为\r\n     */\r\n    protected creat_ProductionCube(treeIndex: number, columnIndex: number): cc.Node {\r\n        let inst = this.creatActor(this.cube, ccvv.layers[1])\r\n        try { inst.getComponent('Block').init(treeIndex); }\r\n        catch { cc.log(\"找不到组件: Block\"); }\r\n        this.bindMovement_consequent(inst);\r\n        return inst;\r\n    }\r\n    /**\r\n     * creat instantiate\r\n     * @param {cc.Prefab} actor 实例化的目标\r\n     * @param {cc.Node} parent 实例化的对象将要附加的目标，如果留空则为自身\r\n     * @returns \r\n     */\r\n    protected creatActor(actor: cc.Prefab, parent?: cc.Node): cc.Node {\r\n        let actorInst = cc.instantiate(actor);\r\n        if (parent) { parent.addChild(actorInst); }\r\n        else { this.node.addChild(actorInst); cc.log(actorInst) }\r\n        return actorInst;\r\n    }\r\n    /**\r\n     * 绑定顺向移动控制组件\r\n     * @param inst \r\n     */\r\n    protected bindMovement_consequent(inst): void {\r\n        let movement = new PawnMovement(inst);\r\n        movement.maxSpeed = this.globalSpeed;\r\n        movement.permDrag = 0;\r\n        movement.permForce = new cc.Vec2(0, -1200);\r\n        movement.velocity = new cc.Vec2(0, -this.globalSpeed);\r\n        inst['otherMovement'] = movement;\r\n    }\r\n    /**\r\n     * 外部玩家阵营复制绑定控制组件\r\n     * @param node \r\n     */\r\n    public bindMovement(node): void {\r\n        this.bindMovement_consequent(node);\r\n    }\r\n\r\n    // SIGNPOST macro                                                                                        \r\n\r\n    /**\r\n     * 获取指定的预制体方块\r\n     */\r\n    public get cube(): cc.Prefab { return ccvv.warehouse['prefabs']['block']; }\r\n    /**\r\n     * 获取当前所有的列数\r\n     */\r\n    public get column(): number { return 4; }\r\n    /**\r\n     * 获取列数内的随机整数\r\n     */\r\n    public get randomInColumn(): number { return Math.floor(Math.random() * this.column); }\r\n    /**\r\n     * 获取方块所占宽度\r\n     */\r\n    public get cubeWidget(): number { return 177; }\r\n    /**\r\n     * 获取方块间隔\r\n     */\r\n    public get cubeInteraval(): number { return 3; }\r\n    /**\r\n     * 获取方块所占高度\r\n     */\r\n    public get cubeHeight(): number { return 100; }\r\n    /**\r\n     * 获取方块诞生原点\r\n     */\r\n    public get spawnOrigin(): cc.Vec2 {\r\n        if (!this._spawnOrigin)\r\n            this._spawnOrigin = cc.v2(\r\n                -(this.column - 1) * (this.cubeWidget + this.cubeInteraval) / 2,\r\n                cc.winSize.height / 2 + this.cubeHeight * 1.4\r\n            )\r\n        return this._spawnOrigin;\r\n    }\r\n    public _spawnOrigin: cc.Vec2 = null;\r\n    /**\r\n     * 获取每行最小可诞生的数量\r\n     */\r\n    public get spawnMinCount(): number { return 2; }\r\n    /**\r\n     * 获取截止线屏幕百分比\r\n     */\r\n    public get separatorPercent(): number { return .290625; }\r\n    /**\r\n     * 获取全局速度\r\n     */\r\n    public get globalSpeed(): number { return 100; }\r\n    /**\r\n     * 获取玩家方块速度\r\n     */\r\n    public get playerSpeed(): number { return 1000; }\r\n    /**\r\n     * 获取树规模\r\n     */\r\n    public get treeSize(): number { return 30; }\r\n}\r\n\r\n"]}