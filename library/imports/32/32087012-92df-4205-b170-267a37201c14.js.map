{"version":3,"sources":["assets\\scripts\\base\\tool\\PawnMovement.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { mathMacro as kismit } from '../class/DevelopersToolGlobal';\r\n\r\ninterface IPawnMovementInterface {\r\n    getPosition(): cc.Vec3;\r\n    setPosition(x: cc.Vec3 | cc.Vec2 | number, y?: number, z?: number);\r\n}\r\n\r\nexport default class PawnMovement {\r\n    constructor(context: cc.Node | IPawnMovementInterface) {\r\n        this.context = context;\r\n        this.arrivePosition = context.getPosition();\r\n    }\r\n\r\n    protected context: cc.Node | IPawnMovementInterface = null;\r\n\r\n    // TAG position                                                                                                 \r\n\r\n    /**\r\n     * 到达目标\r\n     */\r\n    protected _arrivePosition: cc.Vec3;\r\n    /**\r\n     * 获取到达目标\r\n     */\r\n    public get arrivePosition(): cc.Vec3 {\r\n        return this._arrivePosition;\r\n    }\r\n    /**\r\n     * 设置到达目标\r\n     */\r\n    public set arrivePosition(value: cc.Vec3 | cc.Vec2) {\r\n        if (value instanceof cc.Vec2)\r\n            this._arrivePosition = new cc.Vec3(value.x, value.y, 0);\r\n        else\r\n            this._arrivePosition = value;\r\n    }\r\n    /**\r\n     * 添加到达目标偏移量\r\n     */\r\n    public set addArrivePosition(offset: cc.Vec3 | cc.Vec2) {\r\n        if (offset instanceof cc.Vec2)\r\n            this._arrivePosition = this._arrivePosition.add(new cc.Vec3(offset.x, offset.y, 0));\r\n        else\r\n            this._arrivePosition = this._arrivePosition.add(offset);\r\n    }\r\n\r\n\r\n    // TAG move range setting                                                                                       \r\n\r\n    /**\r\n     * 边界定义内容\r\n     */\r\n    protected fixedBound = {\r\n        // 边界有效性\r\n        valid: false,\r\n        // 边界原点\r\n        origin: new cc.Vec3(0),\r\n        // 边界范围\r\n        extent: new cc.Vec3(0),\r\n        // 边界对齐\r\n        align: new cc.Vec3(0),\r\n        // 圆心边界半径\r\n        radius: 0,\r\n    };\r\n\r\n    /**\r\n     * 设置边界\r\n     * @param {*} extent \r\n     * @param {*} origin \r\n     * @param {*} align\r\n     * @param {*} valid \r\n     * @returns \r\n     */\r\n    public setFixedBound = function (extent: cc.Vec3 | cc.Vec2, origin: cc.Vec3 | cc.Vec2, align: cc.Vec3 | cc.Vec2, valid: Boolean) {\r\n        this.fixedBound.extent = extent instanceof cc.Vec2 ? new cc.Vec3(extent.x, extent.y, 0) : extent;\r\n        this.fixedBound.origin = origin instanceof cc.Vec2 ? new cc.Vec3(origin.x, origin.y, 0) : origin;\r\n        this.fixedBound.align = align instanceof cc.Vec2 ? new cc.Vec3(align.x, align.y, 0) : align;\r\n        this.fixedBound.valid = valid ? valid : this.fixedBound.valid;\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * 限制输入矢量在方形边界内\r\n     * @param {*} vector \r\n     * @returns \r\n     */\r\n    protected inBoxBound = function (vector: cc.Vec3) {\r\n        let out = vector;\r\n        if (this.fixedBound.valid) {\r\n            out.x = kismit.clamp(out.x, this.fixedBound.extent.x, this.fixedBound.align.x, this.fixedBound.origin.x);\r\n            out.y = kismit.clamp(out.y, this.fixedBound.extent.y, this.fixedBound.align.y, this.fixedBound.origin.y);\r\n            out.z = kismit.clamp(out.z, this.fixedBound.extent.z, this.fixedBound.align.z, this.fixedBound.origin.z);\r\n        }\r\n        return out;\r\n    }\r\n\r\n    // TAG velocity & movement base                                                                                 \r\n\r\n    // SIGNPOST 通用移动属性                                                                                         \r\n\r\n    protected _LastVelocity = new cc.Vec3(0);\r\n    public get lastVelocity(): cc.Vec3 { return this._LastVelocity; };\r\n    public set lastVelocity(velocity: cc.Vec3) { this._LastVelocity = velocity; };\r\n    /**\r\n     * 当前速度\r\n     * 不建议直接调用，而是使用它的方法:\r\n     * velocity 直接设置速度\r\n     * addVelocity 直接添加速度\r\n     * 直接添加速度并不利于物体运动模拟，应当先进行力的添加:\r\n     * input 添加移动输入\r\n     * force 添加力\r\n     * 计算时需要注意，除非需要将计算值保存在此，否则不可以使用链式运算。\r\n     */\r\n    protected _Velocity = new cc.Vec3(0);\r\n    public get velocity(): cc.Vec3 { return this._Velocity; };\r\n    /**\r\n     * 设置速度\r\n     * @param {vec} velocity \r\n     */\r\n    public set velocity(velocity: cc.Vec3 | cc.Vec2) {\r\n        if (velocity instanceof cc.Vec2)\r\n            this._Velocity = new cc.Vec3(velocity.x, velocity.y, 0);\r\n        else\r\n            this._Velocity = velocity;\r\n    };\r\n    /**\r\n     * 添加速度\r\n     * @param {vec} velocity \r\n     */\r\n    public set addVelocity(velocity) {\r\n        if (velocity instanceof cc.Vec2)\r\n            this._Velocity = this._Velocity.add(new cc.Vec3(velocity.x, velocity.y, 0));\r\n        else\r\n            this._Velocity = this._Velocity.add(velocity);\r\n    };\r\n\r\n    /**\r\n     * 加速度限制\r\n     */\r\n    protected _AccelerationLimit: number = 9999;\r\n    /**\r\n     * 获取最大速度\r\n     */\r\n    public get accelerationLimit(): number { return this._AccelerationLimit; };\r\n    /**\r\n     * 设置最大速度\r\n     * @param {*} speed \r\n     */\r\n    public set accelerationLimit(limit: number) { this._AccelerationLimit = limit };\r\n\r\n    /**\r\n     * 当前模式下最大移动速度\r\n     */\r\n    protected _MaxSpeed: number = 1000;\r\n    /**\r\n     * 获取最大速度\r\n     */\r\n    public get maxSpeed(): number { return this._MaxSpeed; };\r\n    /**\r\n     * 设置最大速度\r\n     * @param {*} speed \r\n     */\r\n    public set maxSpeed(speed) { this._MaxSpeed = speed || this._MaxSpeed; };\r\n\r\n    /**\r\n     * 当前物理力\r\n     */\r\n    protected _Physicforce = new cc.Vec3(0);\r\n    /**\r\n     * 获取物理力\r\n     * @returns \r\n     */\r\n    public get force(): cc.Vec3 { return this._Physicforce };\r\n    /**\r\n     * 设置物理力\r\n     */\r\n    public set force(force: cc.Vec3 | cc.Vec2) {\r\n        if (force instanceof cc.Vec2)\r\n            this._Physicforce = new cc.Vec3(force.x, force.y, 0);\r\n        else\r\n            this._Physicforce = force;\r\n    };\r\n    /**\r\n     * 添加物理力\r\n     */\r\n    public set addforce(force: cc.Vec3 | cc.Vec2) {\r\n        if (force instanceof cc.Vec2)\r\n            this._Physicforce = new cc.Vec3(force.x, force.y, 0).add(this._Physicforce);\r\n        else\r\n            this._Physicforce = force.add(this._Physicforce);\r\n    };\r\n\r\n    /**\r\n     * 当前物理阻力\r\n     */\r\n    protected _PhysicDrag: number = 1;\r\n    /**\r\n     * 获取物理阻力\r\n     * @returns \r\n     */\r\n    public get drag() { return Math.max(this._PhysicDrag, 0) };\r\n    /**\r\n     * 设置物理阻力\r\n     */\r\n    public set drag(drag: number) { this._PhysicDrag = Math.max(drag, 0); };\r\n\r\n    /**\r\n     * 持久力/阻力\r\n     * 该属性会在每次更新时自动加入到物理力中\r\n     * 不论当前是否已经加入物理力\r\n     * 这可以用于 风，引力等属性\r\n     * \r\n     * 当不需要持久力时需要设置为 undefined\r\n     * 这可以通过其设置方法来完成，不需要手动赋值\r\n     */\r\n\r\n    /**\r\n     * 持久力\r\n     * 请不要直接设置持久力，而是使用它的方法：\r\n     * setPermForce() 设置持久力\r\n     * getPermForce() 获取持久力\r\n     * @param {Vec3} permanentForce\r\n     */\r\n    protected _PermanentForce: cc.Vec3 | undefined = undefined;\r\n    /**\r\n     * 设置持久力\r\n     * @param {Vec3} vec 当不需要持久力时设置为undefined可以直接关闭\r\n     */\r\n    public set permForce(force: cc.Vec3 | cc.Vec2 | undefined) {\r\n        if (force) {\r\n            if (force instanceof cc.Vec2)\r\n                this._PermanentForce = new cc.Vec3(force.x, force.y, 0);\r\n            else\r\n                this._PermanentForce = force;\r\n        }\r\n        else\r\n            this._PermanentForce = undefined;\r\n    };\r\n    /**\r\n     * 获取持久力 \r\n     * @returns \r\n     */\r\n    public get permForce(): cc.Vec3 | undefined { return this._PermanentForce };\r\n    public get validpermForce(): boolean { return this._PermanentForce ? true : false };\r\n\r\n    /**\r\n     * 持久阻力\r\n     * 如果不需要使用持久阻力，请设置为undefined\r\n     */\r\n    protected _PermanentDrag: number | undefined = undefined;\r\n    /**\r\n     * 设置持久阻力\r\n     * @param {Number} drag 当不需要持久阻力时设置为undefined可以直接关闭\r\n     * @returns \r\n     */\r\n    public set permDrag(drag: number | undefined) {\r\n        if (drag <= 0) this._PermanentDrag = undefined;\r\n        else this._PermanentDrag = Math.max(drag, 0);\r\n    };\r\n    /**\r\n     * 获取持久阻力\r\n     */\r\n    public get permDrag(): number { return Math.max(this._PermanentDrag || 0, 0) };\r\n    public get validPermDrag(): boolean { return typeof this._PermanentDrag == 'number' };\r\n\r\n    /**\r\n     * 质量\r\n     */\r\n    protected _Mass: number = 1;\r\n    /**\r\n     * 获取质量\r\n     * @returns \r\n     */\r\n    public get mass() { return Math.max(this._Mass, .001) };\r\n    /**\r\n     * 设置质量\r\n     * @returns \r\n     */\r\n    public set mass(value) { this._Mass = Math.max(value, .001) };\r\n\r\n    /**\r\n     * 重力方向\r\n     */\r\n    protected _Gravity: cc.Vec3 = new cc.Vec3(0, 0, -980);\r\n    /**\r\n     * 设置重力方向\r\n     * @param {Number} drag 当不需要持久阻力时设置为undefined可以直接关闭\r\n     * @returns \r\n     */\r\n    public set gravity(gravity: cc.Vec3 | cc.Vec2) {\r\n        if (gravity instanceof cc.Vec2)\r\n            this._Gravity = new cc.Vec3(gravity.x, gravity.y, 0);\r\n        else\r\n            this._Gravity = gravity;\r\n    };\r\n    /**\r\n     * 获取重力方向\r\n     */\r\n    public get gravity(): cc.Vec3 { return this._Gravity };\r\n\r\n    /**\r\n     * 重力标度\r\n     */\r\n    protected _GravityScale: number = 1;\r\n    /**\r\n     * 获取重力标度\r\n     * @returns \r\n     */\r\n    public get gravityScale() { return this._GravityScale };\r\n    /**\r\n     * 设置重力标度\r\n     */\r\n    public set gravityScale(value: number) { this._GravityScale = value };\r\n\r\n\r\n    /**\r\n     * 制动摩擦力因子\r\n     */\r\n    protected _BrakingFrictionFactor: number = 2;\r\n    /**\r\n     * 获取制动摩擦力因子\r\n     * @returns \r\n     */\r\n    public get brakingFrictionFactor(): number { return this._BrakingFrictionFactor };\r\n    /**\r\n     * 设置制动摩擦力因子\r\n     */\r\n    public set brakingFrictionFactor(value: number) { this._BrakingFrictionFactor = value };\r\n\r\n    /**\r\n     * 制动摩擦力\r\n     */\r\n    protected _BrakingFriction: number = 0;\r\n    /**\r\n     * 获取制动摩擦力\r\n     * @returns \r\n     */\r\n    public get brakingFriction(): number { return this._BrakingFriction };\r\n    /**\r\n     * 设置制动摩擦力\r\n     */\r\n    public set brakingFriction(value: number) { this._BrakingFrictionFactor = value };\r\n\r\n    /**\r\n     * 制动降速\r\n     */\r\n    protected _BrakingDeceleration = 2048;\r\n    /**\r\n     * 获取制动降速\r\n     * @returns \r\n     */\r\n    public get brakingDeceleration(): number { return this._BrakingDeceleration };\r\n    /**\r\n     * 设置制动降速\r\n     */\r\n    public set brakingDeceleration(value: number) { this._BrakingDeceleration = value };\r\n\r\n    // SIGNPOST 用户力输入                                                                                           \r\n\r\n    /**\r\n     * 添加移动输入\r\n     * @param {Vec3} direction 方向，默认认为是为单位向量，\r\n     * @param {Number} scale \r\n     */\r\n    public addInput(direction: cc.Vec3 | cc.Vec2, scale?: number) {\r\n        this.force = direction instanceof cc.Vec2 ? new cc.Vec3(direction.x, direction.y, 0) : direction;\r\n        this.force = this.force.mul(this.maxSpeed * (scale || 1));\r\n        return this;\r\n    };\r\n\r\n    /**\r\n     * 添加重力\r\n     */\r\n    public set addGravity(scale) {\r\n        this.force = this.force.add(this.gravity.mul(this.mass));\r\n    };\r\n\r\n    /**\r\n     * 添加阻力\r\n     * @param {*} drag \r\n     * @returns \r\n     */\r\n    public set addDrag(drag: number) {\r\n        this.drag = drag + this.drag;\r\n    };\r\n\r\n    // SIGNPOST 更新获取                                                                                             \r\n\r\n    /**\r\n     * 重力加速度\r\n     */\r\n    public accelerationDue = new cc.Vec3(0);\r\n\r\n    // SIGNPOST 函数宏库                                                                                           \r\n    // SIGNPOST 解算阶段                                                                                           \r\n\r\n    /**\r\n     * 这是一个内部方法\r\n     * 将持久力加入到物理力中\r\n     */\r\n    protected addPermanentForceToPhysic() {\r\n        // 添加持久力\r\n        if (this.validpermForce) {\r\n            this.force = this.force.add(this.permForce);\r\n        }\r\n        // 添加持久阻力 \r\n        this.drag = !this.validPermDrag ? this.drag : (this.permDrag + this.drag);\r\n    };\r\n\r\n    /**\r\n     * 这是一个内部方法\r\n     * 判断当前移动组件是否完全静止\r\n     * @returns \r\n     */\r\n    protected get canMove() {\r\n        return !(cc.Vec3.equals(this.force, cc.Vec3.ZERO) && cc.Vec3.equals(this.velocity, cc.Vec3.ZERO));\r\n    };\r\n\r\n    // SIGNPOST 双流传动式移动载具 - 解算阶段                                                                        \r\n\r\n    /**\r\n     * 速度向前\r\n     * 要使用此方法进行移动，需要在其他任意阶段内向此移动组件添加力\r\n     * \r\n     * @param {*} dt deltatime 与当前帧率绑定，必要项目\r\n     */\r\n    // public velocityForward(dt, rotateRate) {\r\n    //     let slip = kismit.vec2Dot(kismit.rotationToVec2(this.context.rotation), kismit.normaliz2(this.velocity));\r\n    //     slip = (slip - 1) / 2; // 面向时为0，背向时为-2\r\n    // };\r\n\r\n    // TAG 移动更新函数                                                                                             \r\n\r\n    // SIGNPOST 移动更新函数 - 径直-到达点                                                                           \r\n\r\n    /**\r\n    * 更新到计算位置\r\n    * 这个方法会自行移动到 this.arrivePosition\r\n    * 使用此方法将无视阻力与重力，径直按照指定速度平移过去\r\n    * \r\n    * @param {Number} dt deltatime 与当前帧率绑定，必要项目\r\n    * @param {Number} speed 执行速度，缺省maxSpeed\r\n    * @param {Number} th 距离过零阈值，缺省1\r\n    */\r\n    public updateToPosition(dt, th, speed) {\r\n        let conPos = this.context.getPosition();\r\n        let pos = conPos instanceof cc.Vec2 ? new cc.Vec3(conPos.x, conPos.y, 0) : conPos\r\n        let moveVector = this.arrivePosition.sub(pos);\r\n        let movelength = cc.Vec3.len(moveVector);\r\n\r\n        if (movelength > (th || 1)) {\r\n            let unit = moveVector.div(movelength);\r\n            let move = unit.mul(Math.min((speed || this.maxSpeed) * dt, movelength));\r\n            this.context.setPosition(this.inBoxBound(move.add(pos)));\r\n        }\r\n        return this;\r\n    };\r\n\r\n    // SIGNPOST 移动更新函数 - 双流传动式移动载具-到达点                                                               \r\n\r\n    // fix                \r\n    /**\r\n     * 将向前轴面向位置移动\r\n     * 这个方法会自行移动到 this.arrivePosition\r\n     * 使用此方法将无视阻力与重力移动\r\n     * 移动的同时会将自身角度朝向移动方向\r\n     * 可以通过指定\r\n     */\r\n    updateToWardPostion() {\r\n\r\n    };\r\n\r\n\r\n    // SIGNPOST 移动更新函数 - 基本速度驱动                                                                           \r\n\r\n    /**\r\n     * 由速度驱动更新\r\n     * 要使用此方法进行移动，需要在其他任意阶段内向此移动组件添加力\r\n     * \r\n     * 可以响应瞬时力： addForce(), addDrag(), addInput()  \r\n     * 可以响应持久力： permanentForce, permanentDrag  \r\n     * \r\n     * 比如在默认情况下，不会实现阻力，你的移动就像是在无重力环境下一样，\r\n     * 而想要模仿走路或是其他移动模式，需要在此更新事件之前或是之后添加一份力/阻力。  \r\n     * 在通常情况下，你不需要担心添加 力/阻力 执行顺序会造成计算失误\r\n     * 因为这是由单一环路构成的移动模式\r\n     * \r\n     * 关于模拟阶段更新：  \r\n     * 你可以在同一帧或是生命周期的不同阶段内多次进行更新，\r\n     * 但使用更新函数进行迭代会造成速度流逝，\r\n     * 所以建议自行对节点坐标进行迭代，而后统一进行驱动更新  \r\n     * \r\n     * 如果迭代会造成速度错位，可以获取重力加速度，将速度转为动能  \r\n     * 减淡原始速度，而后在更新前将动能返回给力即可  \r\n     * \r\n     * 例如铁链仿真，就可以对每节铁链先进行一次运动更新，\r\n     * 而后进行动能转换，将每节铁链的坐标向前一个进行约束仿真，比如进行迭代仿真30次  \r\n     * 仿真完毕后重新赋能，或是将动能计算为其他效果。  \r\n     * 其余情况下，计算动能并没有什么用处，你可以将其注释。\r\n     * \r\n     * 当然，最好不要用上述方法进行堆栈模拟；  \r\n     * CPU拥有更多复杂的指令代为处理这些方法。\r\n     * \r\n     * 推荐在cocos中将同屏运算数量控制在200以内\r\n     * 这个数值是用c++实现后推算的，c++可以达到2000+  \r\n     * （CPU时间变动不超过±0.01ms的情况下，当然跟平台性能也有关系，所以js的实际表现会更差）\r\n     * 超过这个数值后会出现一定程度的掉帧\r\n     * \r\n     * @param {*} dt deltatime 与当前帧率绑定，必要项目\r\n     */\r\n    public updateByVelocity(dt: number): PawnMovement {\r\n        this.addPermanentForceToPhysic();\r\n        if (this.canMove) {\r\n            this.lastVelocity = this.velocity.clone();\r\n            // 应用质量\r\n            this.force = this.force.div(this.mass);\r\n            // 计算阻力\r\n            let incomingDrag = this.drag * dt + 1;\r\n            // 重力加速度\r\n            this.accelerationDue = this.velocity.div(incomingDrag);\r\n            // 应用力到速度\r\n            let outVelocity = this.force.mul(dt);\r\n            outVelocity = outVelocity.add(this.velocity).div(incomingDrag);\r\n            // 限制\r\n            let outVelocityLength = outVelocity.len();\r\n            outVelocity = outVelocityLength <= this.maxSpeed ? outVelocity : outVelocity.mul(this.maxSpeed).div(outVelocityLength);\r\n            outVelocity = outVelocity.sub(this.lastVelocity)\r\n            outVelocityLength = outVelocity.len();\r\n            outVelocity = outVelocityLength <= this.accelerationLimit ? outVelocity : outVelocity.mul(this.accelerationLimit).div(outVelocityLength);\r\n            outVelocity = outVelocity.add(this.lastVelocity);\r\n            // 新速度\r\n            this.velocity = new cc.Vec3(outVelocity);\r\n            let newPostion = this.context.getPosition();\r\n            // 设置坐标\r\n            this.context.setPosition(this.velocity.mul(dt).add(newPostion instanceof cc.Vec2 ? new cc.Vec3(newPostion.x, newPostion.y, 0) : newPostion));\r\n        }\r\n        this.force.set(cc.Vec3.ZERO);\r\n        this.drag = 0;\r\n        return this;\r\n    };\r\n\r\n    // SIGNPOST 移动更新函数 - 简易力驱动                                                                             \r\n\r\n    /**\r\n     * 由力驱动更新（冲量更新）\r\n     * \r\n     * 一般情况下并不推荐使用  \r\n     * 如果需要实现PBD，光滑核等效果，请使用updateByVelocity()  \r\n     * \r\n     * 可以响应瞬时力： addForce(), addInput()  \r\n     * 可以响应持久力： permanentForce  \r\n     * \r\n     * 如函数名字所示，不会产生速度，只要没有力就会停下  \r\n     * 且计算方式稍有不同，仅将力与时间相乘，称为冲量\r\n     * \r\n     * @param {*} dt deltatime 与当前帧率绑定，必要项目\r\n     */\r\n    updateByforce = function (dt) {\r\n        this.addPermanentForceToPhysic();\r\n        if (this.canMove) {\r\n            let newPostion = this.context.getPosition();\r\n            let updateForce = this.force.mul(dt);\r\n            this.context.setPosition(newPostion.add(updateForce));\r\n        }\r\n        this.force.set(cc.Vec3.ZERO);\r\n        this.drag = 0;\r\n        return this;\r\n    };\r\n\r\n}\r\n"]}