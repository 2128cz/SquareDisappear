{"version":3,"sources":["assets\\scripts\\game\\BL.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { DevelopersToolGlobal as ccvv, mathMacro as mm } from '../base/class/DevelopersToolGlobal';\r\nimport PawnClass from '../base/class/PawnClass';\r\nimport GridAbsorb from '../base/tool/GridAdsorb';\r\nimport NTR from \"../base/tool/NoRootTree\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n@ccclass\r\nexport default class block extends PawnClass {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    update(dt) {\r\n        if (!this.conflict && this.enabledCollision)\r\n            this.node['playerMovement'].updateByVelocity(dt);\r\n        else {\r\n            let gridPos = GridAbsorb.grid.getGridPositionByIndex(new cc.Vec2(0, this.treeIndex));\r\n            this.node.setPosition(this.node.x, gridPos.y);\r\n        }\r\n    }\r\n\r\n    // TAG USER FUNCTION:                                                                                    \r\n\r\n    /**\r\n     * 初始化事件\r\n     * @param Index \r\n     */\r\n    public init(Index: number, playerMode: boolean = false): void {\r\n        if (playerMode) {\r\n            this.node.group = 'player'\r\n            this.enabledCollision = true;\r\n        }\r\n        else {\r\n            this.treeIndex = Index;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 当碰撞产生的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    public onCollisionEnter(other, self) {\r\n        if (!this.enabledCollision) return;\r\n        cc.log(\"碰撞开始\");\r\n\r\n        // 获取碰撞的树节点\r\n        let otherBlock = this.getBlockComponent(other);\r\n        let otherTreeIndex = otherBlock.treeIndex;\r\n        if (typeof otherTreeIndex == 'number') {\r\n            let selfTreeIndex = NTR.tree.getNextIndex(otherTreeIndex, -1);\r\n            let treeGroup = NTR.tree.getBuffer(selfTreeIndex);\r\n            // 如果组在树中\r\n            if (treeGroup) {\r\n                // 由于自己的到来而填充了一行\r\n                if (Object.keys(treeGroup).length + 1 >= ccvv.fristScript.column) {\r\n                    // 就销毁之后包括自己在内的所有节点\r\n                    this.destroyTreeNodeAfterIndex(selfTreeIndex + 1);\r\n                    return;\r\n                }\r\n                // 而不能填充一行的话\r\n                else {\r\n                    // 临时加入到此组中\r\n                    treeGroup[this['_id']] = this.node;\r\n                }\r\n                this.treeIndex = selfTreeIndex;\r\n            }\r\n            // 如果组不在树中，说明在最外边\r\n            else {\r\n                this.treeIndex = NTR.tree.addFromFront({ [this['_id']]: this.node });\r\n            }\r\n\r\n        }\r\n        // 如果还未存在冲突\r\n        if (!this.conflict) {\r\n            // 对齐,避免发生重复对齐\r\n            this.AlignPos = otherBlock.AlignPos;\r\n            cc.log(this.treeIndex, NTR.tree.put, NTR.tree.get, NTR.tree.buffer);\r\n        }\r\n\r\n        // 标记为冲突\r\n        this.markConflictAndCopyMotion();\r\n    }\r\n\r\n    /**\r\n     * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionStay(other, self) {\r\n        if (!this.enabledCollision) return;\r\n        // if (ccvv.getInstanceByName())\r\n        if (!this.waitForConflict)\r\n            cc.log(\"碰撞中\");\r\n\r\n    }\r\n    /**\r\n     * 当碰撞结束后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    onCollisionExit(other, self) {\r\n        if (!this.enabledCollision) return;\r\n        if (!this.node.isValid) return;\r\n        cc.log(\"碰撞结束\");\r\n        if (this.waitForConflict)\r\n            this.conflict = false;\r\n\r\n    }\r\n\r\n    // SIGNPOST function                                                                                     \r\n\r\n    /**\r\n     * 从给定索引处销毁所有节点，包括自身\r\n     * @param index \r\n     */\r\n    protected destroyTreeNodeAfterIndex(index) {\r\n        let treeBehindObject = NTR.tree.cut(index).obj;\r\n        treeBehindObject.forEach(objectElement => {\r\n            Object.keys(objectElement).forEach(elementName => {\r\n                objectElement[elementName].destroy();\r\n            });\r\n        });\r\n        this.node.destroy();\r\n    }\r\n    /**\r\n     * 在给定树索引位置上添加自身\r\n     * @param index \r\n     */\r\n    protected addTreeNodeAtIndex(index) {\r\n\r\n    }\r\n\r\n    /**\r\n     * 标记为冲突并复制运动  \r\n     * 标记冲突时意味着运动将朝向新的运动组件\r\n     * @param index \r\n     */\r\n    protected markConflictAndCopyMotion() {\r\n        // 标记冲突并复制运动\r\n        this.conflict = true;\r\n        if (!this.node['otherMovement'])\r\n            ccvv.fristScript.bindMovement(this.node);\r\n        // 对齐到任意节点中\r\n        // let treeIndexObject = NTR.tree.getBuffer(index);\r\n        // if (!treeIndexObject) {\r\n        //     treeIndexObject = NTR.tree.getBuffer(NTR.tree.getNextIndex(index, 1));\r\n        //     let AlignTarget = treeIndexObject[Object.keys(treeIndexObject)[0]];\r\n        //     this.node.setPosition(new cc.Vec2(this.node.x, AlignTarget.y - ccvv.fristScript.cubeHeight));\r\n        // }\r\n        // else {\r\n        //     let AlignTarget = treeIndexObject[Object.keys(treeIndexObject)[0]];\r\n        //     this.node.setPosition(new cc.Vec2(this.node.x, AlignTarget.y));\r\n        // }\r\n    }\r\n\r\n    // SIGNPOST macro                                                                                        \r\n\r\n    /**\r\n     * 所处树节点索引\r\n     * 当处于玩家阵营时，此索引无效\r\n     */\r\n    protected _TreeIndex: number = null;\r\n    public get treeIndex() { return this._TreeIndex }\r\n    public set treeIndex(value) { this._TreeIndex = value; }\r\n\r\n    /**\r\n     * 获取其他方块node上的block组件\r\n     * @param block \r\n     */\r\n    public getBlockComponent(block): block {\r\n        let blockNode = block instanceof cc.Node ? block : block.node;\r\n        if (!this._ColNode || this._ColNode != blockNode)\r\n            this._ColComponent = blockNode.getComponent('Block');\r\n        return this._ColComponent;\r\n    }\r\n    protected _ColNode: cc.Component = null;\r\n    protected _ColComponent: block = null;\r\n    /**\r\n     * 是否允许处理碰撞，这也代表这是属于玩家阵营的方块\r\n     */\r\n    protected enabledCollision: boolean = false;\r\n\r\n\r\n\r\n    /**\r\n     * 冲突标记\r\n     */\r\n    protected _Conglict: boolean = false;\r\n    public get conflict(): boolean { return this._Conglict; }\r\n    /**\r\n     * 标记或加入到冲突\r\n     */\r\n    public set conflict(value: boolean) {\r\n        // if (typeof value == 'boolean') {\r\n        this._Conglict = value;\r\n        // }\r\n        // else {\r\n        //     this._Conglict = true;\r\n        //     ccvv.setInstanceByName(value, this.node);\r\n        // }\r\n    }\r\n\r\n    /**\r\n     * 剩余等待计数\r\n     */\r\n    private _WaitForConflict: number = 3;\r\n    /**\r\n     * 是否等待冲突\r\n     */\r\n    protected get waitForConflict(): boolean {\r\n        return this._WaitForConflict-- > 0;\r\n    }\r\n\r\n    /**\r\n     * 获取对齐坐标\r\n     */\r\n    public get AlignPos() {\r\n        // 使用无根树方式获取对齐坐标\r\n        // if (!this.enabledCollision) {\r\n        //     let treeIndexObject = NTR.tree.getBuffer(NTR.tree.getNextIndex(this.treeIndex, -1));\r\n        //     if (treeIndexObject) {\r\n        //         let AlignTarget = treeIndexObject[Object.keys(treeIndexObject)[0]];\r\n        //         return new cc.Vec2(this.node.x, AlignTarget.y)\r\n        //     }\r\n        // }\r\n        // return new cc.Vec2(this.node.x, this.node.y - ccvv.fristScript.cubeHeight)\r\n\r\n        // 使用对齐网格获取对齐坐标\r\n        return GridAbsorb.grid.getGridPositionByIndex(new cc.Vec2(0, this.treeIndex - 1));\r\n    }\r\n    /**\r\n     * 设置对齐坐标\r\n     */\r\n    public set AlignPos(value: cc.Vec2) {\r\n        this.node.setPosition(this.node.x, value.y);\r\n    }\r\n}\r\n\r\n"]}