{"version":3,"sources":["assets\\scripts\\game\\BlockGroup.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import GridAbsorb from '../base/tool/GridAdsorb';\r\nimport ss from \"./Setting\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class BlockGroup extends cc.Component {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n        // 随机地图\r\n        if (this._NeedStart) {\r\n            this.randomizeCubeLine();\r\n        }\r\n\r\n    }\r\n\r\n    update(dt) {\r\n        // 检查成员是否满了？\r\n        if (this.needCheckMem) {\r\n            let children = this.node.children.filter(value => { return value.isValid });\r\n            // 满了就销毁\r\n            if (children.length >= ss.Game_Column) {\r\n                this.destroyMembers();\r\n            }\r\n        }\r\n        // 更新自己的坐标\r\n        let pos = GridAbsorb.grid.getGridPositionByIndex(new cc.Vec3(0, this._GridIndex, 0));\r\n        this.node.setPosition(0, pos.y, 0);\r\n    }\r\n\r\n    // tag 用户函数\r\n\r\n    public init(index: number, lastGroup: BlockGroup, nextGroup?: BlockGroup) {\r\n        this._GridIndex = index;\r\n        if (lastGroup) {\r\n            lastGroup._NextGroup = this;\r\n            this._LastGroup = lastGroup;\r\n        }\r\n        if (nextGroup) {\r\n            nextGroup._LastGroup = this;\r\n            this._NextGroup = nextGroup;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 随机化剩余方块\r\n     */\r\n    private randomizeCubeLine() {\r\n        let child = this.node.children;\r\n        let perch = []\r\n        let loop = 7; // 机会\r\n        while (loop--) {\r\n            let curcol = Math.floor(Math.random() * child.length);\r\n            if (perch.indexOf(curcol) < 0)\r\n                perch.push(curcol);\r\n            if (perch.length >= (child.length - 1)) break;\r\n        }\r\n        this.node.children.forEach((element, index) => {\r\n            if (perch.indexOf(index) <= 0)\r\n                element.destroy();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 移除成员\r\n     */\r\n    protected destroyMembers() {\r\n        function findAllChildren(group: BlockGroup): cc.Node[] {\r\n            let groupChildren: cc.Node[] = group.node.children;\r\n            if (group._LastGroup)\r\n                groupChildren = [...groupChildren, ...findAllChildren(group._LastGroup)];\r\n            return groupChildren;\r\n        }\r\n        findAllChildren(this).forEach(element => {\r\n            // 将每个成员都替换为销毁效果节点\r\n            let component = element.getComponent(ss.blockName);\r\n            if (component)\r\n                component.destroyWithAnimation();\r\n        });\r\n        // 这行消除效果\r\n        let inst = cc.instantiate(ss.Effect_Destory);\r\n        this.node.addChild(inst);\r\n    }\r\n\r\n\r\n\r\n    // tag 用户参数，宏\r\n\r\n    /**\r\n     * 此组代表的索引\r\n     */\r\n    protected _GridIndex: number = null;\r\n    public get gridIndex() { return this._GridIndex }\r\n    /**\r\n     * 处于此组下方的组\r\n     */\r\n    protected _LastGroup: BlockGroup = null;\r\n    public get lastGroup() { return this._LastGroup }\r\n    /**\r\n     * 处于此组上方的组\r\n     */\r\n    protected _NextGroup: BlockGroup = null;\r\n    public get nextGroup() { return this._NextGroup }\r\n    /**\r\n     * 需要自动初始化\r\n     */\r\n    protected _NeedStart: boolean = true;\r\n    public set needStart(value: boolean) { this._NeedStart = value };\r\n    /**\r\n     * 需要检查成员标记\r\n     */\r\n    protected _NeedCheckMem: boolean = false;\r\n    public set needCheckMem(value: boolean) { this._NeedCheckMem = value };\r\n    public get needCheckMem(): boolean {\r\n        if (this._NeedCheckMem) { this._NeedCheckMem = false; return true; }\r\n        else return false;\r\n    };\r\n}"]}