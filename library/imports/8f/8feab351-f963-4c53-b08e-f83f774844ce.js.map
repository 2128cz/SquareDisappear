{"version":3,"sources":["assets\\scripts\\game\\GameLevel.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,2EAAmG;AACnG,sDAAiD;AAEjD,qCAA2B;AACrB,IAAA,KAA2C,EAAE,CAAC,UAAU,EAAtD,OAAO,aAAA,EAAE,QAAQ,cAAA,EAAE,iBAAiB,uBAAkB,CAAC;AAI/D;IAAuC,6BAAY;IADnD,qBAAqB;IACrB;QAAA,qEA2HC;QAxHG,cAAQ,GAAY,IAAI,CAAC;QA2Ff,gBAAU,GAAY,KAAK,CAAC;QAwBtC;;WAEG;QACO,eAAS,GAAe,IAAI,CAAC;;IAE3C,CAAC;IAtHG,4BAA4B;IAE5B,0BAAM,GAAN;QACI,QAAQ;QACR,IAAI,CAAC,IAAI,EAAE,CAAC;IAChB,CAAC;IAED,aAAa;IAEb,0BAAM,GAAN,UAAO,EAAE;QACL,mBAAmB;QACnB,IAAI,GAAG,GAAG,oBAAU,CAAC,IAAI,CAAC,sBAAsB,CAAC,iBAAE,CAAC,qBAAqB,CAAC,CAAC;QAC3E,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,IAAI,CAAC,qBAAqB,CAAC,iBAAE,CAAC,WAAW,CAAC,CAAC;SAC9C;QACD,iBAAiB;QACjB,oBAAU,CAAC,IAAI,CAAC,MAAM,GAAG,iBAAE,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC;IACnD,CAAC;IAED,cAAc;IAEd;;OAEG;IACO,wBAAI,GAAd;QACI,UAAU;QACV,IAAI,oBAAU,CACV,IAAI,EAAE,CAAC,IAAI,CAAC,iBAAE,CAAC,WAAW,EAAE,iBAAE,CAAC,SAAS,EAAE,CAAC,CAAC,EAC5C,IAAI,EAAE,CAAC,IAAI,CAAC,iBAAE,CAAC,UAAU,EAAE,iBAAE,CAAC,WAAW,EAAE,CAAC,CAAC,CAChD,CAAC;QACF,OAAO;QACP,IAAI,OAAO,GAAG,EAAE,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC;QAChD,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;QACvB,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;QAChC,OAAO,CAAC,sBAAsB,GAAG,IAAI,CAAC;QAEtC,iDAAiD;QACjD,SAAS;QACT,iBAAE,CAAC,gBAAgB,GAAG,CAAC,CAAC;QACxB,SAAS;QACT,oBAAU,CAAC,IAAI,CAAC,MAAM,GAAG,iBAAE,CAAC,gBAAgB,CAAC;QAC7C,UAAU;QACV,2CAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,OAAO;QACP,IAAI,CAAC,aAAa,EAAE,CAAC;IACzB,CAAC;IAED;;OAEG;IACO,yCAAqB,GAA/B,UAAgC,KAAK;QACjC,gBAAgB;QAChB,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAE,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,eAAe;QACf,IAAI,aAAa,GAAe,IAAI,CAAC,YAAY,CAAC,iBAAE,CAAC,cAAc,CAAC,CAAC;QACrE,aAAa;QACb,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAC1C,WAAW;QACX,IAAI,CAAC,SAAS,GAAG,aAAa,CAAC;QAC/B,OAAO,IAAI,CAAC;IAChB,CAAC;IACD;;;OAGG;IACI,kCAAc,GAArB;QACI,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAE,CAAC,WAAW,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAC1D,OAAO,IAAI,CAAC;IAChB,CAAC;IACD;;OAEG;IACO,mCAAe,GAAzB;QACI,IAAI,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,iBAAE,CAAC,MAAM,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QACrD,eAAe;QACf,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC;QAClC,OAAO,IAAI,CAAC;IAChB,CAAC;IAGD;;OAEG;IACO,iCAAa,GAAvB;QACI,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE;YAClB,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,2CAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;SAC5D;IACL,CAAC;IAEM,gCAAY,GAAnB,UAAoB,KAAK;QACrB,IAAI,SAAS,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,iBAAE,CAAC,UAAU,CAAC;QACtD,IAAI,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAClC,IAAI,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAAE,CAAC,UAAU,GAAG,iBAAE,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,GAAG,iBAAE,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;QAChH,sFAAsF;QACtF,IAAI,CAAC,WAAW,CAAC,GAAG,EAAE,iBAAE,CAAC,SAAS,CAAC,CAAC;IACxC,CAAC;IAGD,aAAa;IAEb;;;;;MAKE;IACQ,8BAAU,GAApB,UAAqB,KAAgB,EAAE,MAAgB;QACnD,IAAI,SAAS,GAAG,EAAE,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;QACtC,IAAI,MAAM,EAAE;YAAE,MAAM,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;SAAE;aACtC;YAAE,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;YAAC,EAAE,CAAC,GAAG,CAAC,SAAS,CAAC,CAAA;SAAE;QACzD,OAAO,SAAS,CAAC;IACrB,CAAC;IAlHD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;+CACO;IAHR,SAAS;QAF7B,OAAO;QACR,qBAAqB;OACA,SAAS,CA2H7B;IAAD,gBAAC;CA3HD,AA2HC,CA3HsC,EAAE,CAAC,SAAS,GA2HlD;kBA3HoB,SAAS","file":"","sourceRoot":"/","sourcesContent":["import { DevelopersToolGlobal as ccvv, mathMacro as mm } from '../base/class/DevelopersToolGlobal';\r\nimport GridAbsorb from '../base/tool/GridAdsorb';\r\nimport BlockGroup from './BlockGroup';\r\nimport ss from \"./Setting\";\r\nconst { ccclass, property, executeInEditMode } = cc._decorator;\r\n\r\n@ccclass\r\n// @executeInEditMode\r\nexport default class GameLevel extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    gameArea: cc.Node = null;\r\n\r\n    // tag LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        // 基本初始化\r\n        this.init();\r\n    }\r\n\r\n    // start() {}\r\n\r\n    update(dt) {\r\n        // 如果目标位置小于一定时，创建方块\r\n        let pos = GridAbsorb.grid.getGridPositionByIndex(ss.GridCurrentPointToVec);\r\n        if (pos.y <= cc.winSize.height / 2) {\r\n            this.SpawnCubeGroupAndInit(ss.GridPointer);\r\n        }\r\n        // 网格移动，这也会驱动方块移动\r\n        GridAbsorb.grid.offset = ss.GameVector.mul(dt);\r\n    }\r\n\r\n    // tag 用户函数部分 \r\n\r\n    /**\r\n     * 游戏重置及初始化\r\n     */\r\n    protected init(): void {\r\n        // 初始化对齐网格\r\n        new GridAbsorb(\r\n            new cc.Vec3(ss.Game_Column, ss.Game_Row2, 0),\r\n            new cc.Vec3(ss.Cube_width, ss.Cube_Height, 0)\r\n        );\r\n        // 开启碰撞\r\n        let manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n        manager.enabledDebugDraw = true;\r\n        manager.enabledDrawBoundingBox = true;\r\n\r\n        // GridAbsorb.grid.anchor = new cc.Vec3(0, 0, 0);\r\n        // 重置网格指针\r\n        ss.GridCurrentPoint = 0;\r\n        // 设置网格起点\r\n        GridAbsorb.grid.offset = ss.GridOriginOffset;\r\n        // 提升脚本，偷懒\r\n        ccvv.script = this;\r\n        // 注册触摸\r\n        this.touchRegister();\r\n    }\r\n\r\n    /**\r\n     * 创建方块组，并按链初始化\r\n     */\r\n    protected SpawnCubeGroupAndInit(index): cc.Node {\r\n        // 初始化,将上一个组传给这组\r\n        let inst = this.creatActor(ss.SquareGroup, this.gameArea);\r\n        // 提供索引以便吸附到网格上\r\n        let instComponent: BlockGroup = inst.getComponent(ss.blockGroupName);\r\n        // 初始化,将索引给到这\r\n        instComponent.init(index, this.lastGroup);\r\n        // 现在这组是上组了\r\n        this.lastGroup = instComponent;\r\n        return inst;\r\n    }\r\n    /**\r\n     * 外部创建方块组 \r\n     * @param index \r\n     */\r\n    public SpawnCubeGroup(): cc.Node {\r\n        let inst = this.creatActor(ss.SquareGroup, this.gameArea);\r\n        return inst;\r\n    }\r\n    /**\r\n     * 创建方块\r\n     */\r\n    protected SpawnPlayerCube(): cc.Node {\r\n        let inst = this.creatActor(ss.Square, this.gameArea);\r\n        // 提供索引以便吸附到网格上\r\n        inst.getComponent('Block').init();\r\n        return inst;\r\n    }\r\n\r\n\r\n    /**\r\n     * 注册触摸事件\r\n     */\r\n    protected touchRegister() {\r\n        if (!this.readyTouch) {\r\n            this.readyTouch = true;\r\n            ccvv.layers[0].on(\"touchstart\", this.onTouchStart, this);\r\n        }\r\n    }\r\n    protected readyTouch: boolean = false;\r\n    public onTouchStart(event) {\r\n        let touchArea = event.getLocation().x / ss.Cube_width;\r\n        let inst = this.SpawnPlayerCube();\r\n        let inx = Math.ceil(touchArea) * (ss.Cube_width + ss.Cube_Interaval) - ((cc.winSize.width + ss.Cube_width) / 2);\r\n        // let inx = Math.ceil(touchArea) * 177 - ((cc.winSize.width + ss.Cube_width) / 2) - 5\r\n        inst.setPosition(inx, ss.Separator);\r\n    }\r\n\r\n\r\n    // tag 基本操作函数\r\n\r\n    /**\r\n    * creat instantiate\r\n    * @param {cc.Prefab} actor 实例化的目标\r\n    * @param {cc.Node} parent 实例化的对象将要附加的目标，如果留空则为自身\r\n    * @returns \r\n    */\r\n    protected creatActor(actor: cc.Prefab, parent?: cc.Node): cc.Node {\r\n        let actorInst = cc.instantiate(actor);\r\n        if (parent) { parent.addChild(actorInst); }\r\n        else { this.node.addChild(actorInst); cc.log(actorInst) }\r\n        return actorInst;\r\n    }\r\n    /**\r\n     * 上一组诞生组\r\n     */\r\n    protected lastGroup: BlockGroup = null;\r\n\r\n}\r\n"]}