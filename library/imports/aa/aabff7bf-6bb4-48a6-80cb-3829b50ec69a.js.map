{"version":3,"sources":["assets\\scripts\\game\\Block.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { DevelopersToolGlobal as ccvv } from \"../base/class/DevelopersToolGlobal\";\r\nimport PawnMovement from \"../base/tool/PawnMovement\";\r\nimport BlockGroup from \"./BlockGroup\";\r\nimport ss from \"./Setting\";\r\n\r\nconst { ccclass, property } = cc._decorator;\r\n\r\n@ccclass\r\nexport default class Block extends cc.Component {\r\n\r\n    // LIFE-CYCLE CALLBACKS:\r\n\r\n    // onLoad () {}\r\n\r\n    start() {\r\n\r\n    }\r\n\r\n    update(dt) {\r\n        if (this.moveFree) {\r\n            this.node['movement'].updateByforce(dt);\r\n            // this.node['movement'].updateByVelocity(dt); // 也可以用这个方法\r\n        }\r\n    }\r\n\r\n    // tag 用户脚本 \r\n\r\n    /**\r\n     * 如果进行初始化，说明是玩家控制  \r\n     * 否则如果是系统生成不需要初始化\r\n     */\r\n    public init(): void {\r\n        // 设定碰撞组\r\n        this.node.group = ss.Group_1;\r\n        // 设定移动\r\n        this.moveFree = true;\r\n        // 赋予移动组件\r\n        let movement: PawnMovement = new PawnMovement(this.node);\r\n        movement.permDrag = 0;\r\n        movement.permForce = ss.CubeVector;\r\n        movement.velocity = ss.CubeVector;\r\n        this.node['movement'] = movement;\r\n        // 定义一定时间后销毁，但是如果遇到碰撞或是其他情况，就必须取消这个定时器\r\n        this.scheduleOnce(this.commitSuicide, this.lifeTime);\r\n    }\r\n    // 自我销毁\r\n    public commitSuicide() { this.node.destroy(); }\r\n\r\n    // tag 碰撞事件 \r\n\r\n    /**\r\n     * 当碰撞产生的时候调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    public onCollisionEnter(other: cc.Collider, self: cc.Collider) {\r\n        // 清除定时器\r\n        this.unschedule(this.commitSuicide);\r\n        // 设定碰撞组\r\n        this.node.group = ss.Group_0;\r\n        // 如果正在自由移动\r\n        if (this.moveFree) {\r\n            // 就禁止自由移动\r\n            this.moveFree = false;\r\n            // 试着加入到其他组\r\n            let otherGroup: BlockGroup = other.node.parent.getComponent(ss.blockGroupName);\r\n            let selfGroup: BlockGroup = otherGroup.lastGroup;\r\n            // 如果不存在这个组，就创建\r\n            if (!selfGroup) {\r\n                let selfGroupInst = ccvv.fristScript.SpawnCubeGroup();\r\n                // 重新定义自己的组\r\n                selfGroup = selfGroupInst.getComponent(ss.blockGroupName);\r\n                // 初始化自己的组\r\n                let selfGroupIndex = otherGroup.gridIndex - 1;\r\n                selfGroup.init(selfGroupIndex, null, otherGroup);\r\n                // 指定不需要自动初始化\r\n                selfGroup.needStart = false;\r\n                // 手动初始化外围部件\r\n                selfGroup.node.children.forEach(element => {\r\n                    element.destroy();\r\n                    element.isValid = false;\r\n                });\r\n            }\r\n            // 加入到组中\r\n            this.node.setPosition(this.node.x, ss.Cube_Perfab_Y, 0);\r\n            this.node.removeFromParent();\r\n            selfGroup.node.addChild(this.node);\r\n            // 提醒组检查成员\r\n            selfGroup.needCheckMem = true;\r\n        }\r\n    }\r\n    /**\r\n     * 当碰撞产生后，碰撞结束前的情况下，每次计算碰撞结果后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    // onCollisionStay(other, self) {}\r\n    /**\r\n     * 当碰撞结束后调用\r\n     * @param  {Collider} other 产生碰撞的另一个碰撞组件\r\n     * @param  {Collider} self  产生碰撞的自身的碰撞组件\r\n     */\r\n    // onCollisionExit(other, self) {}\r\n\r\n    // tag 销毁动画 \r\n\r\n    /**\r\n     * 替换为动画节点后销毁  \r\n     */\r\n    public destroyWithAnimation() {\r\n        let inst = cc.instantiate(ss.Effect_SquareBreak);\r\n        inst.setPosition(this.node.getPosition());\r\n        this.node.parent.addChild(inst);\r\n        this.node.destroy();\r\n    }\r\n\r\n    // tag 用户宏，参数\r\n    /**\r\n     * 自由移动标记\r\n     */\r\n    protected moveFree: boolean = false;\r\n    /**\r\n     * 生命周期\r\n     */\r\n    protected lifeTime: number = cc.winSize.height / ss.CubeSpeed;\r\n}\r\n"]}