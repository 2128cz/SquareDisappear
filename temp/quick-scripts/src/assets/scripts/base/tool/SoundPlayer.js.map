{"version":3,"sources":["assets\\scripts\\base\\tool\\SoundPlayer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\r\n * cocos2.4 2d部分只提供了音量的设置，所以这里只实现包络与并发控制的功能\r\n * 以及在包络的基础上扩展出倾听者功能。\r\n * \r\n * 如何使用：\r\n * 你可以只导入SoundPlayer这个类，并用new SoundPlayer( $soundClip )的方式来播放一次音频  \r\n * new的音频不需要保存，等待播放完毕后会自动销毁；  \r\n * 不过销毁后依然可以继续持有soundpalyer实例，并通过调用play等播放方法重新播放，这是符合用户直觉的。  \r\n * 如果需要完成多音频并发，可以通过在new音频前 预先指定将要存入的播放序列，\r\n * 而这可以通过new声音库预设器来完成。\r\n * \r\n * 播放序列过程：\r\n * 在进行'new SoundPlayer'时，'SoundPlayer'会自动推入到剪辑发射列表，\r\n * 并等待用户后续的所有操作完成，在随后的生命周期函数中，效果器与播放器都会被一一处理。\r\n * \r\n * \r\n * \r\n */\r\n\r\nimport { SoundLibrary, IPreinstallInterface, SoundPlayer, ISoundTrackSequenceInterface, ISceneSoundPlaybackControllerInterface } from \"../class/AudioClass\";\r\nimport SoundListener from \"./SoundListener\";\r\n\r\nconst { ccclass, property, executeInEditMode, playOnFocus, requireComponent, menu, executionOrder, disallowMultiple, inspector, help } = cc._decorator;\r\n\r\n\r\n@ccclass()\r\n@menu('Audio/SoundPlayerManager')\r\n@help('https://github.com/2128cz/CocosCopilot')\r\n@disallowMultiple\r\n// @requireComponent(SoundListener)\r\n// https://docs.cocos.com/creator/manual/zh/editor/extension/inspector.html\r\n@inspector('packages://assets/scripts/base/tool/CompTable.ts')\r\n/**\r\n * 播放器组件类\r\n */\r\nclass SceneSoundPlaybackController extends cc.Component implements ISceneSoundPlaybackControllerInterface {\r\n\r\n    onLoad() { SoundLibrary.soundManager = this; }\r\n\r\n    // start() { }\r\n\r\n    update(dt) {\r\n        if (SoundLibrary.readyLaunchedList.length > 0) {\r\n            let nowInst: SoundPlayer = null;\r\n            SoundLibrary.readyLaunchedList.forEach((element) => {\r\n                if (element instanceof SoundPlayer) {\r\n                    nowInst = element;\r\n                    nowInst.play();\r\n                }\r\n                else {\r\n\r\n                }\r\n            });\r\n            SoundLibrary.readyLaunchedList = []\r\n        }\r\n    }\r\n\r\n    // lateUpdate() {}\r\n    // onDestory() {}\r\n    // onEnable() {}\r\n    // onDisable() { console.warn(\"音乐播放器被隐藏\"); }\r\n}\r\n/**\r\n * 播放器预设器  \r\n * 是所有声音和效果的基类  \r\n * 提供了基本的与控制器处理的方式\r\n * 你可以在一个播放器后跟随多个播放预设，它们会根据当前所处的库预设器来动态调整\r\n */\r\nclass SoundPlayerPreinstall implements IPreinstallInterface {\r\n    /**\r\n     * \r\n     */\r\n    constructor(contor: boolean) {\r\n        this.ignoreSequence = contor;\r\n    }\r\n\r\n    public clong(): IPreinstallInterface {\r\n        return new SoundPlayerPreinstall(this.ignoreSequence);\r\n    }\r\n    public ignoreSequence: boolean = false;\r\n}\r\n/**\r\n * 声音单例库预设器\r\n * 提供了规范的库单例控制方式\r\n */\r\n// class SoundLibraryPreinstall implements IPreinstallInterface {\r\n//     /**\r\n//      *\r\n//      */\r\n//     constructor() {\r\n\r\n//     }\r\n//     public clong(): IPreinstallInterface {\r\n\r\n//     }\r\n// }\r\n/**\r\n * 声音衰减器  \r\n */\r\nclass SoundAttenuation extends SoundPlayerPreinstall { }\r\n/**\r\n * 声音混合器  \r\n * 混合器内的声音会根据自身所处的维度对混合曲线进行采样，\r\n * 自动设定自身的参数\r\n */\r\nclass SoundSubmix extends SoundPlayerPreinstall {\r\n\r\n}\r\n/**\r\n * 声音并发器  \r\n * 并发器可以设定并发数量，并自动设定延时与音量模拟混响  \r\n * 但并发器并非发射器，不可以推入音乐资产\r\n */\r\nclass SoundConcurrency extends SoundPlayerPreinstall {\r\n\r\n    // 并发性\r\n    /**\r\n     * 最大计数\r\n     */\r\n    public MaxCount: number = 8;\r\n    /**\r\n     * 以拥有者为限\r\n     */\r\n    public LimitToOwner: boolean = false;\r\n    /**\r\n     * 解析规则\r\n     */\r\n    public ResolutionRule: number = 0;\r\n    /**\r\n     * 再触发器时间\r\n     */\r\n    public RetriggerTime: number = 0.0001;\r\n\r\n    // 体积比例\r\n    /**\r\n     * 体积规模\r\n     */\r\n    public VolumeScale: number = 1;\r\n    /**\r\n     * 音量比例模式\r\n     */\r\n    public VolumeScaleMode: number = 1;\r\n    /**\r\n     * 交错时间\r\n     */\r\n    public DuckTime: number = 0.01;\r\n    /**\r\n     * 可以恢复\r\n     */\r\n    public CanRecover: boolean = true;\r\n    /**\r\n     * 恢复时间\r\n     */\r\n    public RecoverTime: number = 0.01;\r\n\r\n    // 抢断播放\r\n    // 抢断后释放时间\r\n    public VoiceStealReleaseTime: number = 0.1;\r\n}\r\n\r\nexport {\r\n    SceneSoundPlaybackController, // 播放器控制器组件类\r\n    // SoundPlayerPreinstall, // 播放器预设类，此类不参与运算\r\n    SoundPlayer, // 声音播放器实例类，只播放音乐可以就只导入这个\r\n    // 以下为预制器类\r\n    // SoundLibraryPreinstall, // 声音单例库预设器\r\n    SoundAttenuation, // 声音衰减器\r\n    SoundSubmix, // 声音混合器\r\n    SoundConcurrency, // 声音并发器\r\n}"]}