{"version":3,"sources":["assets\\scripts\\base\\tool\\SoundPlayer.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import SoundListener from \"./SoundListener\";\r\n\r\nconst { ccclass, property, executeInEditMode, playOnFocus, requireComponent, menu, executionOrder, disallowMultiple, inspector, help } = cc._decorator;\r\n/**\r\n * 声音预设器接口\r\n */\r\ninterface ISoundPreinstallInterface {\r\n\r\n}\r\n/**\r\n * 声轨枚举\r\n */\r\nenum ESoundTrack {\r\n    ambient,\r\n    bypass,\r\n    focus,\r\n    other\r\n}\r\n/**\r\n * 音轨声道枚举\r\n */\r\nenum ESoundChannel {\r\n    _track_0,\r\n    _track_1\r\n}\r\n/**\r\n * 声轨声道接口\r\n */\r\ninterface ISoundTrackInterface {\r\n    [key: string]: SoundPlayer[],\r\n}\r\n/**\r\n * 预设器接口\r\n */\r\ninterface ISoundPreinstallInterface {\r\n    clong(): ISoundPreinstallInterface,\r\n\r\n}\r\n@ccclass()\r\n@menu('Audio/SoundPlayerManager')\r\n@help('https://github.com/2128cz/CocosCopilot')\r\n@disallowMultiple\r\n// @requireComponent(SoundListener)\r\n// https://docs.cocos.com/creator/manual/zh/editor/extension/inspector.html\r\n@inspector('packages://assets/scripts/base/tool/CompTable.ts')\r\n/**\r\n * 播放器组件类\r\n */\r\nclass SoundPlayercontroller extends cc.Component {\r\n\r\n    // TAG LIFE-CYCLE callbacks                                                                              \r\n\r\n    onLoad() { SoundLibrary.soundManager = this; }\r\n    // start() { }\r\n\r\n    update(dt) {\r\n        if (SoundLibrary.readyLaunchedList.length > 0) {\r\n            let nowInst: SoundPlayer = null;\r\n            SoundLibrary.readyLaunchedList.forEach((element) => {\r\n                if (element instanceof SoundPlayer) {\r\n                    nowInst = element;\r\n                    nowInst.play();\r\n                }\r\n                else {\r\n\r\n                }\r\n            });\r\n            SoundLibrary.readyLaunchedList = []\r\n        }\r\n    }\r\n\r\n    // lateUpdate() {}\r\n    // onDestory() {}\r\n    // onEnable() {}\r\n\r\n    onDisable() { console.warn(\"音乐播放器被隐藏\"); }\r\n}\r\n/**\r\n * 声音预设器  \r\n * 是所有声音和效果的基类  \r\n * 提供了基本的与控制器处理的方式\r\n */\r\nclass SoundPreinstall implements ISoundPreinstallInterface {\r\n    constructor(contor: boolean) {\r\n        this.ignoreSequence = contor;\r\n    }\r\n    /**\r\n     * 克隆预设器\r\n     * @returns 返回克隆的预设器\r\n     */\r\n    public clong() {\r\n        return new SoundPreinstall(this.ignoreSequence);\r\n    }\r\n\r\n    // tag 参数 \r\n\r\n    /**\r\n     * 预设器会被序列播放器忽略\r\n     */\r\n    public ignoreSequence: boolean = false;\r\n}\r\n/**\r\n * 声音播放器实例类\r\n */\r\nclass SoundPlayer extends SoundPreinstall {\r\n    /**\r\n     * 创建一个音乐播放器实例  \r\n     * 注意，请在onload阶段之后再进行实例化，否则会退化为单例播放\r\n     * 默认播放一次，音量1\r\n     * @param AudioClip 声音资源\r\n     */\r\n    constructor(AudioClip: cc.AudioClip)\r\n    /**\r\n     * 创建一个音乐播放器实例  \r\n     * 注意，请在onload阶段之后再进行实例化，否则会退化为单例播放\r\n     * @param AudioClip 声音资源\r\n     * @param loop 循环次数，-1为无限循环，0为播放一次，>0为循环指定次数\r\n     */\r\n    constructor(AudioClip: cc.AudioClip, loop: number)\r\n    /**\r\n     * 创建一个音乐播放器实例  \r\n     * 注意，请在onload阶段之后再进行实例化，否则会退化为单例播放\r\n     * @param AudioClip 声音资源\r\n     * @param loop 是否循环\r\n     */\r\n    constructor(AudioClip: cc.AudioClip, loop: boolean)\r\n    /**\r\n     * 创建一个音乐播放器实例  \r\n     * 注意，请在onload阶段之后再进行实例化，否则会退化为单例播放\r\n     * @param AudioClip 声音资源\r\n     * @param loop 循环次数，-1为无限循环，0为播放一次，>0为循环指定次数\r\n     * @param volume 音量0-1\r\n     */\r\n    constructor(AudioClip: cc.AudioClip, loop: number, volume: number)\r\n    /**\r\n     * 创建一个音乐播放器实例  \r\n     * 注意，请在onload阶段之后再进行实例化，否则会退化为单例播放\r\n     * @param AudioClip 声音资源\r\n     * @param loop 是否循环\r\n     * @param volume 音量0-1\r\n     */\r\n    constructor(AudioClip: cc.AudioClip, loop: boolean, volume: number)\r\n    constructor(AudioClip: cc.AudioClip, loop?: number | boolean, volume?: number) {\r\n        super(true);\r\n        if (SoundLibrary.soundManager) {\r\n            this._AudioSourceInstantiate = SoundLibrary.soundManager.node.addComponent(cc.AudioSource);\r\n        }\r\n        else {\r\n            super(false);\r\n            cc.audioEngine.playMusic(AudioClip, typeof loop == 'boolean' ? loop : loop < 0)\r\n            cc.warn(`请检查场景中是否存在播放管理器组件，或是存在在onload阶段播放的音频，\r\n            当前播放器已退化为单例，无法并发播放，请悉知，播放资源：${AudioClip}`);\r\n            return;\r\n        }\r\n        this.clip = AudioClip;\r\n        if (typeof loop == 'boolean')\r\n            this.loop = loop;\r\n        else {\r\n            let loopTime = loop ? Math.floor(loop) : 0;\r\n            this.loop = loopTime < 0;\r\n            this._LoopTime = loopTime < 0 ? null : Math.min(loopTime, 1);\r\n        }\r\n        this.volume = volume ? Math.max(Math.min(volume, 1), 0) : 1;\r\n        SoundLibrary.readyLaunched = this;\r\n    }\r\n\r\n    // tag 宏                                                                                                \r\n\r\n    /**\r\n     * 声音组件实例\r\n     */\r\n    protected _AudioSourceInstantiate: cc.AudioSource = null;\r\n    public get audioSourceInstantiate(): cc.AudioSource { return this._AudioSourceInstantiate }\r\n    public get isPlaying(): boolean { return this._AudioSourceInstantiate.isPlaying }\r\n    // 资源\r\n    public get clip(): cc.AudioClip { return this._AudioSourceInstantiate.clip }\r\n    public set clip(value: cc.AudioClip) { this._AudioSourceInstantiate.clip = value }\r\n    // 循环\r\n    public get loop(): boolean { return this._AudioSourceInstantiate.loop }\r\n    public set loop(value: boolean) { this._AudioSourceInstantiate.loop = value }\r\n    // 音量\r\n    public get volume(): number { return this._AudioSourceInstantiate.volume }\r\n    public set volume(value: number) { this._AudioSourceInstantiate.volume = value }\r\n    // 静音\r\n    public get mute(): boolean { return this._AudioSourceInstantiate.mute }\r\n    public set mute(value: boolean) { this._AudioSourceInstantiate.mute = value }\r\n    /**\r\n     * 播放音频剪辑。\r\n     * @returns \r\n     */\r\n    public play(): void { return this._AudioSourceInstantiate.play() }\r\n    /**\r\n     * 停止当前音频剪辑。\r\n     * @returns \r\n     */\r\n    public stop(): void { return this._AudioSourceInstantiate.stop() }\r\n    /**\r\n     * 暂停当前音频剪辑。\r\n     * @returns \r\n     */\r\n    public pause(): void { return this._AudioSourceInstantiate.pause() }\r\n    /**\r\n     * 恢复播放。\r\n     * @returns \r\n     */\r\n    public resume(): void { return this._AudioSourceInstantiate.resume() }\r\n    /**\r\n     * 从头开始播放。\r\n     * @returns \r\n     */\r\n    public rewind(): void { return this._AudioSourceInstantiate.rewind() }\r\n    /**\r\n     * 获取当前的播放时间\r\n     * @returns \r\n     */\r\n    public getCurrentTime(): number { return this._AudioSourceInstantiate.getCurrentTime() }\r\n    /**\r\n     * 设置当前的播放时间\r\n     * @param time \r\n     * @returns \r\n     */\r\n    public setCurrentTime(time: number): number { return this._AudioSourceInstantiate.setCurrentTime(time) }\r\n    /**\r\n     * 获取当前音频的长度\r\n     * @returns \r\n     */\r\n    public getDuration(): number { return this._AudioSourceInstantiate.getDuration() }\r\n    /**\r\n     * 循环次数\r\n     * 如果为null则为无限循环，但是否为无限循环不该从这里进行判断\r\n     */\r\n    protected _LoopTime: number = null;\r\n}\r\n\r\n/**\r\n * 声音衰减器  \r\n */\r\nclass SoundAttenuation extends SoundPreinstall { }\r\n/**\r\n * 声音混合器  \r\n * 混合器内的声音会根据自身所处的维度对混合曲线进行采样，\r\n * 自动设定自身的参数\r\n */\r\nclass SoundSubmix extends SoundPreinstall {\r\n\r\n}\r\n/**\r\n * 声音并发器  \r\n * 并发器可以设定并发数量，并自动设定延时与音量模拟混响  \r\n * 但并发器并非发射器，不可以推入音乐资产\r\n */\r\nclass SoundConcurrency extends SoundPreinstall {\r\n\r\n    // 并发性\r\n    /**\r\n     * 最大计数\r\n     */\r\n    public MaxCount: number = 8;\r\n    /**\r\n     * 以拥有者为限\r\n     */\r\n    public LimitToOwner: boolean = false;\r\n    /**\r\n     * 解析规则\r\n     */\r\n    public ResolutionRule: number = 0;\r\n    /**\r\n     * 再触发器时间\r\n     */\r\n    public RetriggerTime: number = 0.0001;\r\n\r\n    // 体积比例\r\n    /**\r\n     * 体积规模\r\n     */\r\n    public VolumeScale: number = 1;\r\n    /**\r\n     * 音量比例模式\r\n     */\r\n    public VolumeScaleMode: number = 1;\r\n    /**\r\n     * 交错时间\r\n     */\r\n    public DuckTime: number = 0.01;\r\n    /**\r\n     * 可以恢复\r\n     */\r\n    public CanRecover: boolean = true;\r\n    /**\r\n     * 恢复时间\r\n     */\r\n    public RecoverTime: number = 0.01;\r\n\r\n    // 抢断播放\r\n    // 抢断后释放时间\r\n    public VoiceStealReleaseTime: number = 0.1;\r\n}\r\n/**\r\n * 声音播放器静态类\r\n * 不应该被导出或是实例化\r\n */\r\nclass SoundLibrary extends SoundPreinstall {\r\n    /**\r\n     * 待发列表\r\n     */\r\n    protected static _SoundList_ReadyLaunched: SoundPlayer[] = [];\r\n    /**\r\n     * 获取待发列表\r\n     */\r\n    public static get readyLaunchedList(): SoundPlayer[] { return this._SoundList_ReadyLaunched }\r\n    /**\r\n     * 设置待发列表\r\n     */\r\n    public static set readyLaunchedList(sl: SoundPlayer[]) { this._SoundList_ReadyLaunched = sl }\r\n    /**\r\n     * 添加待发列表项目\r\n     */\r\n    public static set readyLaunched(sl: SoundPlayer) { if (!this._SoundList_ReadyLaunched) this._SoundList_ReadyLaunched = []; this.readyLaunchedList.push(sl) }\r\n\r\n    /**\r\n     * 声音编辑轨道\r\n     */\r\n    protected static _SoundEditingTrack: ISoundTrackInterface = null;\r\n    /**\r\n     * 获取声音编辑轨道\r\n     */\r\n    public static get soundEditingTrack(): ISoundTrackInterface {\r\n        this._SoundEditingTrack = this._SoundEditingTrack || (() => {\r\n            let soundEditingTrack = {};\r\n            Object.keys(ESoundTrack).forEach(ST => {\r\n                if (isNaN(parseInt(ST))) {\r\n                    Object.keys(ESoundChannel).forEach(SC => {\r\n                        if (isNaN(parseInt(SC))) {\r\n                            soundEditingTrack[ST + SC] = [];\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n            return soundEditingTrack as ISoundTrackInterface;\r\n        })()\r\n        return this._SoundEditingTrack\r\n    }\r\n    /**\r\n     * 获取枚举上的声轨\r\n     * @param tarck \r\n     * @param channel \r\n     * @returns \r\n     */\r\n    public static getEditTrack(tarck: ESoundTrack, channel: ESoundChannel): SoundPlayer[] {\r\n        return this.soundEditingTrack[ESoundTrack[tarck] + ESoundChannel[channel]];\r\n    }\r\n\r\n    protected static _SoundManager: SoundPlayercontroller = null;\r\n    /**\r\n     * 获取声音控制管理器\r\n     */\r\n    public static get soundManager(): SoundPlayercontroller { return this._SoundManager }\r\n    /**\r\n     * 设置声音控制管理器\r\n     */\r\n    public static set soundManager(SPM: SoundPlayercontroller) { this._SoundManager = SPM }\r\n\r\n}\r\n\r\nexport {\r\n    SoundPlayercontroller, // 播放器组件类\r\n    SoundPlayer, // 声音播放器实例类，只播放音乐可以就只导入这个\r\n    SoundPreinstall, // 音效预设类\r\n    // 以下为预制特效类\r\n    SoundAttenuation, // 声音衰减器\r\n    SoundSubmix, // 声音混合器\r\n    SoundConcurrency, // 声音并发器\r\n    // 以下为类型\r\n    ESoundTrack,    // 声轨枚举，每个声轨包含所有声道\r\n    ESoundChannel,  // 声道枚举，在一个声轨中进行切换\r\n}"]}