{"version":3,"sources":["assets\\scripts\\game\\GameLevel.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { DevelopersToolGlobal as ccvv, mathMacro as mm } from '../base/class/DevelopersToolGlobal';\r\nimport GridAbsorb from '../base/tool/GridAdsorb';\r\nimport PawnMovement from '../base/tool/PawnMovement';\r\nimport BlockGroup from './BlockGroup';\r\nimport ss from \"./Setting\";\r\nconst { ccclass, property, executeInEditMode } = cc._decorator;\r\n/**\r\n * 对于关卡蓝图中的参数，都定义在设置中\r\n * 而其他蓝图中的参数则会放置在其最强关联处，比如自己本身的类内\r\n * 而部分地方可能会用到全局工具的部分，可以改为以设置类全局的模式，全局工具是旧方法\r\n * 关于全局工具的用法，可以参考discard-标记的文件，他们是已经确定废弃的用法\r\n */\r\n@ccclass\r\n// @executeInEditMode\r\nexport default class GameLevel extends cc.Component {\r\n\r\n    @property(cc.Node)\r\n    gameArea: cc.Node = null;\r\n\r\n    @property(cc.Node)\r\n    effectArea: cc.Node = null;\r\n\r\n    // tag LIFE-CYCLE CALLBACKS:\r\n\r\n    onLoad() {\r\n        // 提升脚本，这是为了兼容旧方法，设置中也同提升了\r\n        ccvv.script = this;\r\n\r\n        // 开启碰撞\r\n        let manager = cc.director.getCollisionManager();\r\n        manager.enabled = true;\r\n        manager.enabledDebugDraw = true;\r\n        manager.enabledDrawBoundingBox = true;\r\n\r\n        \r\n    }\r\n\r\n    onEnable() {\r\n        // 基本初始化, enable时游戏就已经开始了\r\n        this.init();\r\n    }\r\n\r\n    // start() {}\r\n\r\n    update(dt) {\r\n        // 如果目标位置小于一定时，创建方块\r\n        let pos = GridAbsorb.grid.getGridPositionByIndex(ss.GridCurrentPointToVec);\r\n        if (pos.y > 0 && pos.y <= cc.winSize.height / 2) {\r\n            this.SpawnCubeGroupAndInit(ss.GridPointer);\r\n        }\r\n        // 如果最后一行小于一定时，结束游戏\r\n        if (ss.endCubeGroup && ss.endCubeGroup.node.y < ss.Separator) {\r\n            this.gameOver();\r\n        }\r\n        // 否则继续网格移动，这也会驱动方块移动\r\n        else {\r\n            // 简单的移动方式\r\n            // GridAbsorb.grid.offset = ss.GameVector.mul(dt);\r\n\r\n            // 移动组件移动方式\r\n            ss.movement.addforce = ss.GameAutoSpeed;\r\n            ss.movement.addDrag = ss.GameAutoDrag;\r\n            ss.movement.updateByVelocity(dt);\r\n        }\r\n        \r\n    }\r\n\r\n    // tag 用户函数部分 \r\n\r\n    /**\r\n     * 游戏重置及初始化  \r\n     * 开始时调用一次\r\n     */\r\n    protected init(): void {\r\n        // 初始化对齐网格\r\n        GridAbsorb.grid = new GridAbsorb(\r\n            new cc.Vec3(ss.Game_Column, ss.Game_Row2, 0),\r\n            new cc.Vec3(ss.Cube_width, ss.Cube_Height, 0)\r\n        );\r\n        // 赋予移动组件\r\n        ss.movement = new PawnMovement(GridAbsorb.grid);\r\n        ss.movement.maxSpeed = ss.GameSpeed;\r\n        // 设置网格边界锚点\r\n        // GridAbsorb.grid.anchor = new cc.Vec3(0, 0, 0);\r\n        // 设置网格起点\r\n        GridAbsorb.grid.offset = ss.GridOriginOffset;\r\n\r\n        // 重置网格指针\r\n        ss.GridCurrentPoint = 0;\r\n\r\n        // 注册触摸\r\n        this.touchRegister();\r\n\r\n        // 清理战场\r\n        ss.endCubeGroup = null;\r\n        if (this.gameArea.children.length > 0) this.gameArea.children.forEach(e => { e.destroy() });\r\n        if (this.effectArea.children.length > 0) this.effectArea.children.forEach(e => { e.destroy() });\r\n    }\r\n\r\n    /**\r\n     * 创建方块组，并按链初始化  \r\n     */\r\n    protected SpawnCubeGroupAndInit(index): cc.Node {\r\n        // 初始化,将上一个组传给这组\r\n        let inst = this.SpawnCubeGroup();\r\n        // 提供索引以便吸附到网格上\r\n        let instComponent: BlockGroup = inst.getComponent(ss.blockGroupName);\r\n        // 初始化,将索引给到这\r\n        instComponent.init(index, this.lastGroup);\r\n        // 现在这组是上组了\r\n        this.lastGroup = instComponent;\r\n        return inst;\r\n    }\r\n    /**\r\n     * 创建方块组 \r\n     * @param index \r\n     */\r\n    public SpawnCubeGroup(): cc.Node {\r\n        let inst = this.creatActor(ss.SquareGroup, this.gameArea);\r\n        return inst;\r\n    }\r\n    /**\r\n     * 创建方块\r\n     */\r\n    protected SpawnPlayerCube(): cc.Node {\r\n        let inst = this.creatActor(ss.Square, this.gameArea);\r\n        // 提供索引以便吸附到网格上\r\n        inst.getComponent('Block').init();\r\n        return inst;\r\n    }\r\n\r\n    /**\r\n    * 游戏结束时的动作  \r\n    * 游戏结束时调用一次\r\n    */\r\n    protected gameOver() {\r\n        // 暂停触摸\r\n        // ccvv.layers[0].pauseSystemEvents(true);\r\n        ss.menu.gameOver()\r\n\r\n        let allChildren = this.lastGroup.findAllChildren(this.lastGroup);\r\n        // 一个一个破掉的效果\r\n        let allChildrenCount = allChildren.length;\r\n        cc.log(allChildren);\r\n        this.schedule(() => {\r\n            if (allChildrenCount--) {\r\n                let desAct = allChildren[allChildrenCount];\r\n                desAct.getComponent(ss.blockName).destroyWithAnimation();\r\n            } else {\r\n                this.unscheduleAllCallbacks();\r\n                ss.menu.openMenu();\r\n            }\r\n        }, .08);\r\n    }\r\n\r\n\r\n    // tag 用户触摸事件\r\n\r\n    /**\r\n     * 注册触摸事件\r\n     */\r\n    protected touchRegister() {\r\n        if (!this.readyTouch) {\r\n            this.readyTouch = true;\r\n            ccvv.layers[0].on(\"touchstart\", this.onTouchStart, this);\r\n        }\r\n        else {\r\n            ccvv.layers[0].resumeSystemEvents(true);\r\n        }\r\n    }\r\n    protected readyTouch: boolean = false;\r\n    public onTouchStart(event) {\r\n        let touchArea = event.getLocation().x / ss.Cube_width;\r\n        let inst = this.SpawnPlayerCube();\r\n        let inx = Math.ceil(touchArea) * (ss.Cube_width + ss.Cube_Interaval) - ((cc.winSize.width + ss.Cube_width) / 2);\r\n        // let inx = Math.ceil(touchArea) * 177 - ((cc.winSize.width + ss.Cube_width) / 2) - 5\r\n        inst.setPosition(inx, ss.Separator);\r\n    }\r\n\r\n\r\n\r\n    // tag 特效方法 \r\n\r\n    /**\r\n     * 冰冻特效  \r\n     * 赋予两倍阻力\r\n     */\r\n    ice(): void {\r\n        let inst = this.creatActor(ss.Effect_Ice, this.effectArea);\r\n        ss.movement.permDrag = 2;\r\n        this.scheduleOnce(() => {\r\n            ss.movement.permDrag = 0;\r\n        }, ss.ice_Duration);\r\n    }\r\n    /**\r\n     * 击退特效  \r\n     * 赋予一个反方向的力  \r\n     */\r\n    hit(): void {\r\n        let inst = this.creatActor(ss.Effect_Hit, this.effectArea);\r\n        inst.setPosition(ss.endCubeGroup.node.getPosition());\r\n        ss.movement.addforce = new cc.Vec2(0, ss.hit_Force);\r\n        ss.movement.drag = 0;\r\n        ss.movement.maxSpeed = ss.GameSpeed;\r\n    }\r\n    /**\r\n     * 清屏特效  \r\n     * 将屏幕内的所有方块都进行清理，使用的是方块自身的消除方法，所以也会播放销毁特效\r\n     */\r\n    boom(): void {\r\n        let inst = this.creatActor(ss.Effect_Boom, this.effectArea);\r\n        ss.endCubeGroup = this.lastGroup.nextGroup;\r\n        this.lastGroup.destroyMembers(false);\r\n    }\r\n\r\n    // tag 基本操作函数 \r\n\r\n    /**\r\n    * creat instantiate\r\n    * @param {cc.Prefab} actor 实例化的目标\r\n    * @param {cc.Node} parent 实例化的对象将要附加的目标，如果留空则为自身\r\n    * @returns \r\n    */\r\n    protected creatActor(actor: cc.Prefab, parent?: cc.Node): cc.Node {\r\n        let actorInst = cc.instantiate(actor);\r\n        if (parent) { parent.addChild(actorInst); }\r\n        else { this.node.addChild(actorInst); cc.log(actorInst) }\r\n        return actorInst;\r\n    }\r\n    /**\r\n     * 上一组诞生组\r\n     */\r\n    protected lastGroup: BlockGroup = null;\r\n}\r\n"]}